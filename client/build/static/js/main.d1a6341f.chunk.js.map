{"version":3,"sources":["react-auth0-spa.js","components/Nav/Nav.js","components/Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","isAuthenticated","loginWithRedirect","logout","onClick","to","Profile","loading","user","src","picture","alt","name","email","JSON","stringify","App","className","path","exact","component","Boolean","hostname","match","ReactDOM","render","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1a6341f.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\nimport \"./Nav.css\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <div>\n      {!isAuthenticated && (\n        <button\n          onClick={() =>\n            loginWithRedirect({})\n          }\n        >\n          Log in\n        </button>\n      )}\n\n      {isAuthenticated && <button onClick={() => logout()}>Log out</button>}\n\n      {isAuthenticated && (\n      <span>\n        <Link to=\"/\">Home</Link>&nbsp;\n        <Link to=\"/profile\">Profile</Link>\n      </span>\n      )}\n\n    </div>\n  );\n};\n\nexport default NavBar;","// src/components/Profile.js\n\nimport React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  );\n};\n\nexport default Profile;","// src/App.js\n\nimport React from \"react\";\nimport NavBar from \"./components/Nav\";\nimport Profile from \"./components/Profile\";\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {/* New - use BrowserRouter to provide access to /profile */}\n      <BrowserRouter>\n        <header>\n          <NavBar />\n        </header>\n        <Switch>\n          <Route path=\"/\" exact />\n          <Route path=\"/profile\" component={Profile} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n/*import React from 'react';\nimport Nav from \"./components/Nav\";\nimport Public from \"./screens/Public\";\nimport Reports from \"./screens/Reports\";\nimport Tackle from \"./screens/Tackle\";\nimport Profile from \"./screens/Profile\";\nimport Footer from \"./components/Footer\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\n\nclass App extends React.Component\n{\n    state =\n    {\n      loggedIn: false,\n      username: \"tswizz\",\n      name: \"\",\n      password: \"\"\n    };\n\n  render()\n  {\n    return(\n      <div>\n        <div className=\"container\">\n          \n\n          <Nav />\n          \n\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" render={(props) => <Public {...props} loggedIn={this.state.loggedIn} username={this.state.username} name={this.state.name} password={this.state.password} />} />\n              <Route exact path=\"/reports\" render={(props) => <Reports {...props} loggedIn={this.state.loggedIn} username={this.state.username} name={this.state.name} />} />\n              <Route exact path=\"/tackle\" render={(props) => <Tackle {...props} loggedIn={this.state.loggedIn} username={this.state.username} name={this.state.name} />} />\n              <Route exact path=\"/profile\" render={(props) => <Profile {...props} loggedIn={this.state.loggedIn} username={this.state.username} name={this.state.name} />} />\n            </Switch>\n          </Router>\n\n          <Footer />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}